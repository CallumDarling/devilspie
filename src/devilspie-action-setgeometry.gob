%h{
#include <gdk/gdkx.h>

#include "devilspie.h"
#include "devilspie-action.h"

#define DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET G_MININT
%}

class DevilsPie:Action:SetGeometry from DevilsPie:Action {

  public gint xoffset = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET;
  property INT xoffset
  (nick = _("X offset"),
   blurb = _("Horizontal offset of the window"),
   flags = CONSTRUCT,
   default_value = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET, link);

  public gint yoffset = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET;
  property INT yoffset
  (nick = _("Y offset"),
   blurb = _("Vertical offset of the window"),
   flags = CONSTRUCT,
   default_value = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET, link);

  public gint width = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET;
  property INT width
  (nick = _("Width"),
   blurb = _("Width of the window"),
   flags = CONSTRUCT,
   default_value = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET, link);

  public gint height = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET;
  property INT height
  (nick = _("Height"),
   blurb = _("Height of the window"),
   flags = CONSTRUCT,
   default_value = DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET, link);

  override (DevilsPie:Action) gboolean run(DevilsPie:Action *self (check null type), Wnck:Window *window (check null type)) {
    DevilsPieActionSetGeometry *a = (DevilsPieActionSetGeometry*)self;

    gint new_xoffset, new_yoffset, new_width, new_height;
    wnck_window_get_geometry(window, &new_xoffset, &new_yoffset, &new_width, &new_height);

    if (a->xoffset != DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET)
      new_xoffset = a->xoffset;
    if (a->yoffset != DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET)
      new_yoffset = a->yoffset;
    if (a->width != DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET)
      new_width = a->width;
    if (a->height != DEVILSPIE_ACTION_SETGEOMETRY_NOT_SET)
      new_height = a->height;
    
    XMoveResizeWindow (gdk_display,
                       wnck_window_get_xid (window),
                       new_xoffset, new_yoffset,
                       new_width, new_height);
    
    return TRUE;
  }

  public GObject *new(void) {
    return (GObject*)GET_NEW;
  }
}
