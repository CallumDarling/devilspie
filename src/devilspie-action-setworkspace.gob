%h{
#define WNCK_I_KNOW_THIS_IS_UNSTABLE
#include "libwnck/screen.h"
#include "libwnck/window.h"
#include "libwnck/workspace.h"
#include "tristate-dummy.h"
#include "devilspie-action.h"
#include "devilspie.h"

/* Sucky. Use gettext */
#define _(x) x
%}

class DevilsPie:Action:SetWorkspace from DevilsPie:Action {

  public DevilsPieTriState pinned;
  property ENUM pinned
  (nick = _("Pinned"),
   blurb = _("Window is pinned on all workspaces, aka sticky"),
   enum_type = DevilsPie:TriState, default_value = TRI_UNSET, link);

  public int workspace_index = -1;
  property INT workspace_index
  (nick = _("Workspace"),
   blurb = _("Which workspace to move this window to (numbered)"),
   default_value = -1, link);

  override (DevilsPie:Action) gboolean run(DevilsPie:Action *self (check null type), Wnck:Window *window (check null type)) {
    DevilsPieActionSetWorkspace *a = (DevilsPieActionSetWorkspace*)self;

    /* Move the window to the correct workspace */
    if (a->workspace_index != -1) {
      WnckScreen *screen;
      WnckWorkspace *workspace;
      screen = wnck_window_get_screen(window);
      /* Adjust for 0-offset in workspaces list */
      workspace = wnck_screen_get_workspace(screen, a->workspace_index-1);
      if (!workspace) {
        g_warning(_("Workspace number %d does not exist"), a->workspace_index);
      }
      wnck_window_move_to_workspace(window, workspace);
    }

    /* Pin the window */
    if (a->pinned == TRI_TRUE)
      wnck_window_pin(window);
    else if (a->pinned == TRI_FALSE)
      wnck_window_unpin(window);

    return TRUE;
  }
  
  public GObject *new(void) {
    return (GObject*)GET_NEW;
  }
}
