%h{
#define WNCK_I_KNOW_THIS_IS_UNSTABLE
#include "libwnck/window.h"
#include "libwnck/screen.h"
#include "devilspie-action.h"
#include "devilspie.h"

#include <gdk/gdkx.h>

#include <X11/X.h>
#include <X11/Xatom.h>
Atom _wnck_atom_get (const char *atom_name);
void _wnck_error_trap_push();
int  _wnck_error_trap_pop();
%}


%{
void wnck_window_set_window_type (WnckWindow *window, WnckWindowType wintype)
{
  Atom atom;

  g_return_if_fail (WNCK_IS_WINDOW (window));

  switch (wintype) {
  case WNCK_WINDOW_NORMAL:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_NORMAL");
    break;
  case WNCK_WINDOW_DESKTOP:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_DESKTOP");
    break;
  case WNCK_WINDOW_DOCK:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_DOCK");
    break;
  case WNCK_WINDOW_DIALOG:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_DIALOG");
    break;
  case WNCK_WINDOW_MODAL_DIALOG:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_MODAL_DIALOG");
    break;
  case WNCK_WINDOW_TOOLBAR:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_TOOLBAR");
    break;
  case WNCK_WINDOW_MENU:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_MENU");
    break;
  case WNCK_WINDOW_UTILITY:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_UTILITY");
    break;
  case WNCK_WINDOW_SPLASHSCREEN:
    atom = _wnck_atom_get ("_NET_WM_WINDOW_TYPE_SPLASHSCREEN");
    break;
  default:
    return;
  }
  _wnck_error_trap_push ();

  XChangeProperty (GDK_DISPLAY(),
                   wnck_window_get_xid(window),
                   _wnck_atom_get ("_NET_WM_WINDOW_TYPE"),
		   XA_ATOM, 32, PropModeReplace,
		   (guchar *)&atom, 1);

  _wnck_error_trap_pop ();
}
%}

class DevilsPie:Action:SetWintype from DevilsPie:Action {

  public WnckWindowType wnck_wintype;

  property STRING wintype
  (nick = _("Window type hint"),
   blurb = _("The window type hint"),
   default_value = NULL)
    set
      {
	const gchar *str = g_value_get_string(VAL);
	if (strcmp(str, "NORMAL") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_NORMAL;
	else if (strcmp(str, "DIALOG") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_DIALOG;
	else if (strcmp(str, "MENU") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_MENU;
	else if (strcmp(str, "TOOLBAR") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_TOOLBAR;
	else if (strcmp(str, "SPLASHSCREEN") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_SPLASHSCREEN;
	else if (strcmp(str, "UTILITY") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_UTILITY;
	else if (strcmp(str, "DOCK") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_DOCK;
	else if (strcmp(str, "DESKTOP") == 0)
 	  self->wnck_wintype = WNCK_WINDOW_DESKTOP;
        else self->wnck_wintype = -1;
      };

  override (DevilsPie:Action) gboolean run(DevilsPie:Action *self   (check null type), 
					   Wnck:Window      *window (check null type)) {
    WnckWindowType wintype = DEVILSPIE_ACTION_SETWINTYPE(self)->wnck_wintype;

    if (wintype > 0)
	wnck_window_set_window_type (window, wintype);

    return TRUE;
  }

  init(self) {
    DEVILSPIE_ACTION_SETWINTYPE(self)->wnck_wintype = -1;
  }

}
