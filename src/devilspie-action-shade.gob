%h{
#define WNCK_I_KNOW_THIS_IS_UNSTABLE
#include "libwnck/window.h"
#include "libwnck/screen.h"
#include "tristate-dummy.h"
#include "devilspie-action.h"
#include "devilspie.h"
#include "xutils.h"

#include <X11/Xlib.h>
#include <X11/Xatom.h>
Screen *_wnck_screen_get_xscreen (WnckScreen *screen);
%}

class DevilsPie:Action:Shade from DevilsPie:Action {

	public DevilsPieTriState shaded;
	property ENUM shaded
		(nick         = _("Is shaded?"),
		blurb         = _("(Un)Shade window, toggle if unset"),
		flags         = CONSTRUCT,
 		enum_type     = DevilsPie:TriState,
		default_value = TRI_UNSET,
		link);

	override (DevilsPie:Action) gboolean run(DevilsPie:Action *self (check null type), Wnck:Window *window (check null type)) {
		DevilsPieActionShade *a = (DevilsPieActionShade*)self;

		/* TRUE = shade, FALSE = unshade, UNSET = don't touch (could be toggle state, but that wouldnt be consistent) */
		if (a->shaded == TRI_TRUE) {
			my_wnck_change_state (my_wnck_window_get_xscreen(window),
			                      wnck_window_get_xid(window),
			                      TRUE,
			                      my_wnck_atom_get ("_NET_WM_STATE_SHADED"),
			                      0);
		}

		if (a->shaded == TRI_FALSE) {
			my_wnck_change_state (my_wnck_window_get_xscreen(window),
			                      wnck_window_get_xid(window),
			                      FALSE,
			                      my_wnck_atom_get ("_NET_WM_STATE_SHADED"),
			                      0);
		}

		XSync (GDK_DISPLAY (), False);
		return TRUE;
	}
  
	public GObject *new(void) {
		return (GObject*)GET_NEW;
	}
}
