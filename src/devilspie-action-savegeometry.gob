%h{
#define WNCK_I_KNOW_THIS_IS_UNSTABLE
#include "libwnck/window.h"
#include "devilspie-action.h"
#include <stdio.h>
%}

/**
 * This action saves and restores window geometry. It uses the same
 * algorithm as the session manager, i.e. window with the same title
 * and role are identical.
 *
 * Unfortunately, there is no easy way to get X Atoms via libwnck.
 * /me pesters Havoc
 * So I have to go down to the raw X interfaces.
 */
class DevilsPie:Action:SaveGeometry from DevilsPie:Action {

  /**
   * This callback is called when the geometry of the window changes.
   */
  private void geometry_changed_cb (WnckWindow *window) {
    g_message ("Window %s geometry changed", wnck_window_get_name (window));
  }

  /**
   * This callback is called when a window on a screen is closed.
   */
  private void window_closed_cb (WnckScreen *screen, WnckWindow *window) {
    g_message ("Window %s closed", wnck_window_get_name (window));
  }

  override (DevilsPie:Action) gboolean run(DevilsPie:Action *self (check null type), Wnck:Window *window (check null type)) {
    puts("Starting SaveGeometry action");
    /* Find the window in the geometry maps, and apply if found */
    /* TODO */
    /* Hook up the geometry changes signal so we can store future changes */
    g_signal_connect (window, "geometry_changed", G_CALLBACK(self_geometry_changed_cb), NULL);
    return TRUE;
  }

  /**
   * The constructor. Sets up a callback when windows are closed so we
   * can track that and persist the state.
   */
  init (self) {
    WnckScreen *screen;
    screen = wnck_screen_get_default ();
    /* Hook up to the window_closing signal so we can persist the settings */
    g_signal_connect (screen, "window_closed", G_CALLBACK(self_window_closed_cb), NULL);

  }
  public GObject *new(void) {
    return (GObject*)GET_NEW;
  }
}
