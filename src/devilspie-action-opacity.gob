%h{
#include <glib/gi18n.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <gdk/gdkx.h>
#include <unistd.h>
#include <libwnck/window.h>
#include <libwnck/screen.h>

#include "tristate-dummy.h"
#include "devilspie-action.h"
#include "xutils.h"

/* Composite transparency */
#define OPAQUE     0xffffffff
#define OPACITY    "_NET_WM_WINDOW_OPACITY"
#define OPAQUE_DEF 0xc0000000

Screen *_wnck_screen_get_xscreen (WnckScreen *screen);
%}

class DevilsPie:Action:Opacity from DevilsPie:Action {

	public double opacity = 0.75;
	property DOUBLE opacity
		(nick = _("Opacity of window"),
		blurb = _("Window is transparent (requires a Composite Manager)"),
		flags = CONSTRUCT,
		default_value = 0.75,
		minimum=0.0,
		maximum=1.0,
		link);

	/* sets opacity of window. */
	private void composite_set_opacity(Wnck:Window *window, double opacity) {
		Window Real, Parent, Root;
		Window *Buf0;
		unsigned int Value;
		Atom ActualReturnType;
		unsigned long Buf1, Buf2;
		unsigned char *Data;

		/* from our window-id, find the last window-id up the tree before the   */
		/* root-window. xcompmgr works only with this id.                       */
		Real = wnck_window_get_xid (window);
		Root = 0;
		while (XQueryTree (GDK_DISPLAY (), Real, &Root, &Parent, &Buf0, &Value)
		       && (Real   != Root) && (Parent != Root))
			Real = Parent;
		usleep (100); /* TODO: race condition, fix this */

		/* if opacity-value is not valid then toggle between OPAQUE_DEF or not set */
		if ((opacity < 0) || (opacity > 1)) {
			XGetWindowProperty (GDK_DISPLAY (), Real,       /* Display *, Window,               */
			                    my_wnck_atom_get (OPACITY),  /* Atom property,                   */
			                    0L, 1L, False, XA_CARDINAL, /* offset, length, delete, req_type */
			                    &ActualReturnType, &Value, &Buf1, &Buf2, &Data);
			/* check if there was any value read from window */
			if (Data != None) {
				memcpy (&Value, Data, sizeof (unsigned int));
				XFree ((void *)Data);
			} else {
				Value = OPAQUE;
			}

			/* finally toggle, depending on current value */
			Value =  (Value != OPAQUE) ? OPAQUE : OPAQUE_DEF;
		} else {
			/* opacity within valid range */
			Value = (unsigned int)(opacity * OPAQUE);
		}

		if (Value == OPAQUE) {
			XDeleteProperty (GDK_DISPLAY (), Real, my_wnck_atom_get (OPACITY));
		} else {
			XChangeProperty (GDK_DISPLAY (), Real, my_wnck_atom_get (OPACITY),
			                 XA_CARDINAL, 32, PropModeReplace,
			                 (unsigned char *)&Value, 1L);
		}
		XSync (GDK_DISPLAY (), False);
	}

	override (DevilsPie:Action) gboolean run (DevilsPie:Action *self (check null type), Wnck:Window *window (check null type) ) {
		DevilsPieActionOpacity *a = (DevilsPieActionOpacity*)self;

		self_composite_set_opacity (window, a->opacity );
		return TRUE;
	}
  
	public GObject *new (void ) {
		return (GObject*)GET_NEW;
	}
}
